service: partymode

custom:
  tableName: partymode-${self:provider.stage}
  dynamoEndpoint: https://dynamodb.us-west-2.amazonaws.com

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, "dev"}
  region: us-west-2
  memorySize: 512
  timeout: 20
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource: arn:aws:dynamodb:*:*:table/${self:custom.tableName}
  environment:
    DYNAMODB_ENDPOINT: ${self:custom.dynamoEndpoint}
    DYNAMODB_TABLE_NAME: ${self:custom.tableName}
    MY_NUMBER: ${env:MY_NUMBER}
    SLACK_WEBHOOK_URI: ${env:SLACK_WEBHOOK_URI}
    BOT_TOKEN: ${env:BOT_TOKEN}
    BOT_NAME: ${env:BOT_NAME}

package:
  artifact: build/libs/partymode.jar

functions:
  call-handler:
    handler: com.merricklabs.partymode.handlers.CallHandler
    events:
      - http:
          path: call
          method: post
  slack-event-handlerreceive:
    handler: com.merricklabs.partymode.handlers.SlackMessageHandler
    events:
      - http:
          path: slack/event
          method: post
          # The following makes this endpoint async, so it immediately
          # returns 200 while the Lambda is still processing.
          # Otherwise Slack will retry messages which results in duplicate responses.
          # Todo: This doesn't work with URL verification. Probably should respond immediately to challenges,
          # and push anything else onto a queue.
          async: true

resources:
  Resources:
    RidesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: start_time
            AttributeType: S
        KeySchema:
          - AttributeName: start_time
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}